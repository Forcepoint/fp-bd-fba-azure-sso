package cmd

import (
	"fmt"
	"github.cicd.cloud.fpdev.io/BD/fp-fba-azure-sso/azurecli"
	"github.cicd.cloud.fpdev.io/BD/fp-fba-azure-sso/lib"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"io/ioutil"
	"strings"
	"time"
)

// runCmd represents the run command
var runCmd = &cobra.Command{
	Use:   "run",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		if !AzureInstance.IsLogin {
			if err := AzureInstance.Login(); err != nil {
				logrus.Fatal(err)
			}
		}
		//defer AzureInstance.Logout()
		defer DBInstance.Close()
		logrus.Info("FBA Azure Sync Service started. waiting for new events ....")
		if err := AzureInstance.ConfigureSaml(viper.GetString("AZURE_APPLICATION_NAME")); err != nil {
			if err != azurecli.SamlConfigured {
				logrus.Fatal(err)
			}
		} else {
			logrus.Infof("SSO is been configured for application '%s'", viper.GetString("AZURE_APPLICATION_NAME"))
			time.Sleep(10 * time.Second)
			ssoCert := ""
			for {
				ssoCert2, err2 := AzureInstance.GetSamlBase64Cert(viper.GetString("AZURE_APPLICATION_NAME"))
				if err2 != nil {
					if err2 == azurecli.NotLoadedYet {
						logrus.Info("Waiting for SAML Federation Metadata to be generated by Azure")
						fmt.Println(ssoCert2)
						time.Sleep(20 * time.Second)
						continue
					}
					logrus.Fatal(err2)
					break
				}
				ssoCert = ssoCert2
				break
			}
			logrus.Info("Base64 Certificate extracted from App Federation Metadata XML")
			script, err := AzureInstance.CreateSsoConfig(viper.GetString("AZURE_APPLICATION_NAME"), ssoCert)
			if err != nil {
				logrus.Fatal(err)
			}
			if err := ioutil.WriteFile(viper.GetString("SSO_CONFIG_SCRIPT_PATH"), []byte(script), 0644); err != nil {
				logrus.Fatal("failed in writing the SSO Config Script")
			}
			time.Sleep(20 * time.Second)
			logrus.Infof("SSO Configuration script is been written to %s", viper.GetString("SSO_CONFIG_SCRIPT_PATH"))
			logrus.Info("Updating replyUrls for application: " + viper.GetString("AZURE_APPLICATION_NAME"))
			time.Sleep(10 * time.Second)

			if err := AzureInstance.UpdateRelyUrls(viper.GetString("AZURE_APPLICATION_NAME")); err != nil {
				logrus.Fatal(err)
			}
		}
		// validate azure groups, check if all required FBA Roles groups are exists in azure AD
		roles, rolesId, err := DBInstance.GetRoles()
		if err != nil {
			logrus.Error(err)
		}
		for group, d := range roles {
			isExist, err := AzureInstance.ValidateAzureGroups(group)
			if err != nil {
				logrus.Error(err)
			}
			if !isExist && err == nil {
				if err := AzureInstance.CreateGroup(group, d); err != nil {
					logrus.Error(err)
				} else {
					logrus.Infof("Created Azure Group '%s'", group)
				}
			}
		}

		for {
			fbaUsers, err := DBInstance.GetAllUsers()
			if err != nil {
				logrus.Error(err)
			}
			azureUsers, err := AzureInstance.GetAllAzureUsers()
			if err != nil {
				logrus.Error(err)
			}
			appUsers, err := AzureInstance.GetAppAssignedUsers(viper.GetString("AZURE_APPLICATION_NAME"))
			if err != nil {
				logrus.Error(err)
			}
			var users []string
			for u, _ := range fbaUsers {
				users = append(users, u)
			}
			var appUsersTemp []string
			for _, u := range appUsers {
				if u != "" && u != " " {
					if strings.Contains(u, "#EXT#@") {
						userParts := strings.Split(u, "#")
						u = strings.ReplaceAll(userParts[0], "_", "@")
					}
					appUsersTemp = append(appUsersTemp, u)
				}
			}
			if err := SyncUsers(azureUsers, users, appUsers); err != nil && err != lib.NoRowFound {
				logrus.Error(err)
			}
			time.Sleep(5 * time.Second)
			appUsers = appUsersTemp
			fbaUsers, err = DBInstance.GetAllUsers()
			if err != nil {
				logrus.Error(err)
			}
			userRoles, err := DBInstance.GetUsersRoles(fbaUsers)
			if err != nil {
				logrus.Error(err)
			}
			azureGroupMembers, err := AzureInstance.GetAllGroupsMembers(rolesId, appUsers)
			if err := SyncRoles(azureGroupMembers, userRoles, fbaUsers, rolesId); err != nil && err != lib.NoRowFound {
				logrus.Error(err)
			}
			time.Sleep(time.Duration(viper.GetInt("USERS_SYNC_TIME_IN_MINUTES")) * time.Minute)
		}
	},
}

func init() {
	rootCmd.AddCommand(runCmd)
	if err := rootCmd.MarkPersistentFlagRequired("config"); err != nil {
		logrus.Fatal(err)
	}

}
